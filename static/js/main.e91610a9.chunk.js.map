{"version":3,"sources":["Button.tsx","functions.ts","App.tsx","index.tsx"],"names":["MapButton","styled","button","color","Button","onClick","useState","x","setX","textColor","useEffect","onContextMenu","e","preventDefault","randomNumber","min","max","Math","floor","random","generateMapBySize","row","column","map","y","stringsRow","i","push","generateMap","mapSize","bombsCoordinates","coordinate","find","element","isEqual","length","createBombsCoordinates","num","toString","openCoordinates","visibleMap","mapWithBombs","coordinates","startY","startX","endY","endX","MainBlock","div","LevelButton","ButtonsList","ButtonRow","App","setMap","setMapWithBombs","setRandom","startGame","size","prevRandom","onOpenClick","clearMap","slice","alert","buttonsArr","mainIndex","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e91610a9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ButtonProps {\r\n  onClick: () => void;\r\n  button: string\r\n}\r\n\r\nconst MapButton = styled.button<{color: string}>`\r\nmargin: 1px;\r\nwidth: 30px;\r\nheight: 30px;\r\nborder-top: 3px solid #ebebeb;\r\nborder-right: 3px solid #797979;\r\nborder-bottom: 3px solid #797979;\r\nborder-left: 3px solid #ebebeb;\r\ncolor: ${({ color }) => color};\r\nfont-size: 20px;\r\nfont-weight: bold;\r\n`;\r\n\r\nconst Button = ({ onClick, button }: ButtonProps) => {\r\n  const [x, setX] = useState(button);\r\n  let textColor = '';\r\n\r\n  useEffect(() => {\r\n    setX(button);\r\n  }, [button]);\r\n\r\n  if (button === '1') {\r\n    textColor = 'blue';\r\n  } else if (button === '2') {\r\n    textColor = 'green';\r\n  } else if (button === '3') {\r\n    textColor = 'red';\r\n  }\r\n\r\n  if (x === 'â–¡' || x === ' ') {\r\n    setX('');\r\n  }\r\n\r\n  const setMine = () => {\r\n    if (x !== '!') {\r\n      setX('!');\r\n    } else {\r\n      setX(button);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <MapButton onContextMenu={(e) => {\r\n      setMine();\r\n      e.preventDefault();\r\n      return false;\r\n    }} onClick={onClick} color={textColor}>\r\n      {x}\r\n    </MapButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { isEqual } from 'lodash';\r\n\r\nexport interface Coordinates {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nconst randomNumber = (min: number, max: number) => Math.floor(Math.random() * (max - min) + min);\r\n\r\nconst generateMapBySize = (row: number, column: number) => {\r\n  const map: string[][] = [];\r\n\r\n  for (let y = 0; y < column; y++) {\r\n    const stringsRow = [];\r\n\r\n    for (let i = 0; i < row; i++) {\r\n      stringsRow.push(' ');\r\n    }\r\n    map.push(stringsRow);\r\n  }\r\n  return map;\r\n};\r\n\r\nexport const generateCleanMap = (size: Coordinates) => generateMapBySize(size.x, size.y);\r\n\r\nconst createBombsCoordinates = (mapSize: number) => {\r\n  const bombsCoordinates: number[][] = [];\r\n\r\n  while (bombsCoordinates.length !== mapSize) {\r\n    const coordinate: number[] = [];\r\n    coordinate.push(randomNumber(0, mapSize), randomNumber(0, mapSize));\r\n\r\n    const checkEqual = (element: number[]) => isEqual(element, coordinate);\r\n\r\n    if (!bombsCoordinates.find(checkEqual)) {\r\n      bombsCoordinates.push(coordinate);\r\n    }\r\n  }\r\n  return bombsCoordinates;\r\n};\r\n\r\nexport const generateMap = (mapSize: Coordinates) => {\r\n  const map = generateMapBySize(mapSize.x, mapSize.y);\r\n  const bombsCoordinates = createBombsCoordinates(mapSize.x);\r\n\r\n  for (let i = 0; i < bombsCoordinates.length; i++) {\r\n    const x = bombsCoordinates[i][0];\r\n    const y = bombsCoordinates[i][1];\r\n    map[x][y] = '*';\r\n  }\r\n\r\n  for (let y = 0; y < map.length; y++) {\r\n    for (let x = 0; x < map[y].length; x++) {\r\n      let num = 0;\r\n\r\n      if (map[y][x] !== '*') {\r\n        if (map[y - 1]?.[x - 1] === '*') {\r\n          num += 1;\r\n        }\r\n        if (map[y - 1]?.[x] === '*') {\r\n          num += 1;\r\n        }\r\n        if (map[y - 1]?.[x + 1] === '*') {\r\n          num += 1;\r\n        }\r\n        if (map[y][x - 1] === '*') {\r\n          num += 1;\r\n        }\r\n        if (map[y][x + 1] === '*') {\r\n          num += 1;\r\n        }\r\n        if (map[y + 1]?.[x - 1] === '*') {\r\n          num += 1;\r\n        }\r\n        if (map[y + 1]?.[x] === '*') {\r\n          num += 1;\r\n        }\r\n        if (map[y + 1]?.[x + 1] === '*') {\r\n          num += 1;\r\n        }\r\n        map[y][x] = num.toString();\r\n      }\r\n    }\r\n  }\r\n  return map;\r\n};\r\n\r\nexport const openCoordinates = (\r\n  visibleMap: string[][], mapWithBombs: string[][], coordinates: Coordinates,\r\n) => {\r\n  visibleMap[coordinates.y][coordinates.x] = mapWithBombs[coordinates.y][coordinates.x];\r\n\r\n  if (mapWithBombs[coordinates.y][coordinates.x] === '0') {\r\n    const startY = Math.max(0, coordinates.y - 1);\r\n    const startX = Math.max(0, coordinates.x - 1);\r\n    const endY = Math.min(mapWithBombs.length - 1, coordinates.y + 1);\r\n    const endX = Math.min(mapWithBombs.length - 1, coordinates.x + 1);\r\n\r\n    for (let y = startY; y <= endY; y++) {\r\n      for (let x = startX; x <= endX; x++) {\r\n        if (mapWithBombs[y][x] !== '0') {\r\n          visibleMap[y][x] = mapWithBombs[y][x];\r\n        } else if (visibleMap[y][x] === ' ') {\r\n          openCoordinates(visibleMap, mapWithBombs, { x, y });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return visibleMap;\r\n};\r\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Button from './Button';\nimport {\n  generateCleanMap, generateMap, openCoordinates, Coordinates,\n} from './functions';\n\nconst MainBlock = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n`;\n\nconst LevelButton = styled.button`\nborder: none;\nmargin: 10px;\n`;\n\nconst ButtonsList = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nbackground-color: #797979;\nflex-wrap: wrap;\n`;\n\nconst ButtonRow = styled.div`\ndisplay: flex;\nflex-direction: row;\n`;\n\nconst App = () => {\n  const [map, setMap] = useState<string[][]>([]);\n  const [mapWithBombs, setMapWithBombs] = useState<string[][]>([]);\n  const [random, setRandom] = useState(0);\n\n  const startGame = (mapSize: Coordinates) => {\n    setRandom((prevRandom) => prevRandom + 1);\n    setMap(generateCleanMap(mapSize));\n    setMapWithBombs(generateMap(mapSize));\n  };\n\n  const onOpenClick = (coordinates: Coordinates) => {\n    const clearMap = map.slice(0);\n\n    if (mapWithBombs[coordinates.y][coordinates.x] === '*') {\n      alert('You lose!');\n      setMap(mapWithBombs);\n      return;\n    }\n\n    openCoordinates(clearMap, mapWithBombs, coordinates);\n    setMap(clearMap);\n  };\n\n  return (\n    <MainBlock>\n      <div>\n        <LevelButton onClick={() => {\n          startGame({ x: 10, y: 10 });\n        }}>1 level</LevelButton>\n        <LevelButton onClick={() => {\n          startGame({ x: 20, y: 20 });\n        }}>2 level</LevelButton>\n      </div>\n        <ButtonsList>\n          {map.map((buttonsArr, mainIndex) => (\n            <ButtonRow key={mainIndex + 1}>\n              {buttonsArr.map((button, index) => (\n                <Button\n                  onClick={() => {\n                    onOpenClick({ x: index, y: mainIndex });\n                  }}\n                  key={`${mainIndex.toString()} ${index.toString()} ${random}`}\n                  button={button}\n                />))}\n            </ButtonRow>\n          ))}\n        </ButtonsList>\n    </MainBlock>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}